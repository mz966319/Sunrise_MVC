@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager


<ul class="navbar-nav">


    @if (SignInManager.IsSignedIn(User))
    {
        @if (User.IsInRole(SD.Role_Admin) || User.IsInRole(SD.Role_Super_Admin))
        {
            <li class="nav-item d-lg-inline-flex">
                <a class="nav-link" asp-area="Admin" asp-controller="ApplicationUser" asp-action="Index">
                    <i class="bi bi-person-fill-gear"></i><span class="ms-1 d-none d-sm-inline"> Users || </span>
                </a>
            </li>
        }
        // Get the current user
        var user = await UserManager.GetUserAsync(User);
        var userRole = "null";

        if (!(user is null))
        {
            var roles = await UserManager.GetRolesAsync(user);
            // Assuming the user has only one role, get the first role
            userRole = roles.FirstOrDefault() ?? "No Role";
        }
        
        <li class="nav-item">
            <a id="manage" class="nav-link text-truncate" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@UserManager.GetUserName(User): @userRole</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-truncate border-0">Logout</button>
        </form>
    </li>
}
else
{
    @* <li class="nav-item">
         <a class="nav-link text-truncate" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li> *@
    <li class="nav-item">
        <a class="nav-link text-truncate" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>

